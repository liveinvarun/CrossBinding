// This file has been autogenerated from a class added in the UI designer.

using System;
using System.ComponentModel;
using Foundation;
using MvvmCross.Binding.BindingContext;
using MvvmCross.Binding.iOS;
using MvvmCross.Binding.iOS.Views;
using MvvmCross.Binding.iOS.Views.Gestures;
using SampleApp.Portable;
using UIKit;

namespace SampleApp
{
    public partial class RegistrationCell : MvxTableViewCell, INotifyPropertyChanged
    {
        RegistartionViewModel _viewModel;
        public RegistrationCell(IntPtr handle) : base(handle)
        {

        }

        internal void UpdateCell(RegistartionViewModel viewModel)
        {
            _viewModel = viewModel;
            this.DataContext = _viewModel;
            this.DelayBind(() =>

            {
                //var set = this.CreateBindingSet<RegistrationCell, RegistartionViewModel>();
                //set.Bind().To(o => o.Username).For(c => c.UserNameField);
                //set.Bind(NextBtn.Tap()).For(o => o.Command).To(i => i.Login);
                //// set.Bind(NextBtn.BindTouchUpInside()).To(i => i.Login);
                //// set.Bind(NextBtn).To(i => i.Login);
                //set.Apply();


                var setq = this.CreateBindingSet<RegistrationCell, RegistartionViewModel>();
                setq.Bind(NextBtn).For("TouchUpInside").To(vm => vm.Login);
                // setq.Bind(NextBtn).To(o => o.Login).Mode(MvvmCross.Binding.MvxBindingMode.TwoWay);
                //  setq.Bind(NextBtn).To(o => o.Login);
                setq.Bind().To(o => o.IsEnabled).For(p => p.IsEnabled).Mode(MvvmCross.Binding.MvxBindingMode.TwoWay);
                //setq.Bind(NextBtn.Tap()).For(o => o.Command).To(i => i.Login);
                setq.Apply();
            });

        }



        public bool IsEnabled
        {
            get
            {
                NextBtn.Enabled = true;
                return NextBtn.Enabled;
            }
            set
            {
                NextBtn.Enabled = value;
                RaisePropertyChanged("IsEnabled");
            }
        }

        public string UserNameField
        {
            get
            {
                return usernameField.Text;
            }
            set
            {
                usernameField.Text = value;
                RaisePropertyChanged("UserNameField");
            }
        }


        #region INotifyPropertyChanged implementation

        public event PropertyChangedEventHandler PropertyChanged;

        protected virtual void RaisePropertyChanged(string propertyName)
        {
            PropertyChangedEventHandler handler = PropertyChanged;
            if (handler != null)
                handler(this, new PropertyChangedEventArgs(propertyName));
        }

        #endregion
    }
}
